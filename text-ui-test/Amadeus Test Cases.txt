====================================================================================================

    *** Unit Test Cases (for input.txt testing) ***
These test cases represent different user interactions with the chatbot. 
They are organized into categories for better readability and testing coverage.

====================================================================================================

    1. Initial Setup and List Management

➤ Check if able to parse existing saved list
- Purpose: Verify that the chatbot can load and parse tasks from a saved file.
- Input: `list`
- Expected Output: The chatbot should display the list of tasks from the file without errors.

➤ Execute reset list command
- Purpose: Test the `reset` command to clear all tasks.
- Input: `reset`
- Expected Output: All tasks are deleted, and the chatbot confirms the reset.

➤ Check if Empty Task List
- Purpose: Verify behavior when the task list is empty.
- Input: `list`
- Expected Output: The chatbot displays a message indicating no pending tasks.

====================================================================================================

    2. Adding Tasks

➤ Adding a ToDo Task
- Purpose: Ensure ToDo tasks are added correctly.
- Input: `todo Buy groceries`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following TODO has been stored:  
  ╰┈➤ Buy groceries
  ```

➤ Adding a ToDo with Missing Description
- Purpose: Check error handling for missing input.
- Input: `todo`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Please provide the TODO task name/description!
  ```

➤ Add extra ToDo (4th task) to delete later
- Purpose: Add an additional task for deletion testing.
- Input: `todo Read a book`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following TODO has been stored:  
  ╰┈➤ Read a book
  ```
  
====================================================================================================

    3. Test Cases for Event Tasks
Event tasks require a start time (`/from`) and an end time (`/to`). Test cases include valid and invalid inputs for both dates and times.

    *** Valid Inputs ***

➤ Date Only (No Time)
- Input: `event project meeting /from 2/12/2019 /to 3/12/2019`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following EVENT has been stored:  
  ╰┈➤ project meeting (from: 2/12/2019 to: 3/12/2019)
  ```

➤ Date with Time (12-hour format)
- Input: `event team lunch /from 2/12/2019 12:00PM /to 2/12/2019 1:00PM`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following EVENT has been stored:  
  ╰┈➤ team lunch (from: 2/12/2019 12:00PM to: 2/12/2019 1:00PM)
  ```

➤ Date with Time (24-hour format)
- Input: `event conference /from 2/12/2019 1400 /to 2/12/2019 1800`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following EVENT has been stored:  
  ╰┈➤ conference (from: 2/12/2019 1400 to: 2/12/2019 1800)
  ```

➤ Date with Time (Mixed Formats)
- Input: `event workshop /from 2-12-2019 6.30AM /to 2-12-2019 12.00PM`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following EVENT has been stored:  
  ╰┈➤ workshop (from: 2-12-2019 6.30AM to: 2-12-2019 12.00PM)
  ```

➤ Date with Time (Different Delimiters)
- Input: `event party /from 2 12 2019 6PM /to 2 12 2019 10PM`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following EVENT has been stored:  
  ╰┈➤ party (from: 2 12 2019 6PM to: 2 12 2019 10PM)
  ```

➤ Date with Time (Case-Insensitive AM/PM)
- Input: `event dinner /from 2/12/2019 6pm /to 2/12/2019 8pm`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following EVENT has been stored:  
  ╰┈➤ dinner (from: 2/12/2019 6pm to: 2/12/2019 8pm)
  ```

➤ Date with Time (Single-Digit Day/Month)
- Input: `event meeting /from 1/1/2023 9:00AM /to 1/1/2023 10:00AM`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following EVENT has been stored:  
  ╰┈➤ meeting (from: 1/1/2023 9:00AM to: 1/1/2023 10:00AM)
  ```

    *** Invalid Inputs ***

➤ Missing `/from` or `/to`
- Input: `event project meeting /from 2/12/2019`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Invalid EVENT format! Use: <description> /from <start> /to <end>
  ```

➤ Invalid Date Format
- Input: `event workshop /from 12-2-2019 /to 13-2-2019`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Invalid EVENT format! Use: <description> /from <start> /to <end>
  ```

➤ Invalid Time Format
- Input: `event team lunch /from 2/12/2019 12:60PM /to 2/12/2019 1:00PM`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Invalid EVENT format! Use: <description> /from <start> /to <end>
  ```

➤ End Time Before Start Time
- Input: `event conference /from 2/12/2019 6:00PM /to 2/12/2019 5:00PM`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Invalid EVENT format! Use: <description> /from <start> /to <end>
  ```

➤ Empty Input
- Input: `event`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Please provide the EVENT task name/description!
  ```
  
====================================================================================================

    4. Test Cases for Deadline Tasks
Deadline tasks require a due date (`/by`). Test cases include valid and invalid inputs for dates and times.

    *** Valid Inputs ***

➤ Date Only (No Time)
- Input: `deadline project submission /by 2/12/2019`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following DEADLINE has been stored:  
  ╰┈➤ project submission (by: 2/12/2019)
  ```

➤ Date with Time (12-hour format)
- Input: `deadline report /by 2/12/2019 6:00PM`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following DEADLINE has been stored:  
  ╰┈➤ report (by: 2/12/2019 6:00PM)
  ```

➤ Date with Time (24-hour format)
- Input: `deadline presentation /by 2/12/2019 1800`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following DEADLINE has been stored:  
  ╰┈➤ presentation (by: 2/12/2019 1800)
  ```

➤ Date with Time (Mixed Formats)
- Input: `deadline review /by 2-12-2019 6.30AM`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following DEADLINE has been stored:  
  ╰┈➤ review (by: 2-12-2019 6.30AM)
  ```

➤ Date with Time (Different Delimiters)
- Input: `deadline meeting /by 2 12 2019 6PM`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following DEADLINE has been stored:  
  ╰┈➤ meeting (by: 2 12 2019 6PM)
  ```

➤ Date with Time (Case-Insensitive AM/PM)
- Input: `deadline dinner /by 2/12/2019 6pm`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following DEADLINE has been stored:  
  ╰┈➤ dinner (by: 2/12/2019 6pm)
  ```

➤ Date with Time (Single-Digit Day/Month)
- Input: `deadline task /by 1/1/2023 9:00AM`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following DEADLINE has been stored:  
  ╰┈➤ task (by: 1/1/2023 9:00AM)
  ```

    *** Invalid Inputs ***

➤ Missing `/by`
- Input: `deadline project submission`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Invalid DEADLINE format! Use: <description> /by <date>
  ```

➤ Invalid Date Format
- Input: `deadline report /by 12-2-2019`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Invalid DEADLINE format! Use: <description> /by <date>
  ```

➤ Invalid Time Format
- Input: `deadline presentation /by 2/12/2019 12:60PM`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Invalid DEADLINE format! Use: <description> /by <date>
  ```

➤ Empty Input
- Input: `deadline`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Please provide the DEADLINE task name/description!
  ```
  
====================================================================================================

    5. Edge Cases

➤ Leap Year
- Input: `deadline leap year /by 29/2/2024`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following DEADLINE has been stored:  
  ╰┈➤ leap year (by: 29/2/2024)
  ```

➤ Non-Leap Year
- Input: `deadline non-leap year /by 29/2/2023`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Invalid DEADLINE format! Use: <description> /by <date>
  ```

➤ Time at Midnight
- Input: `deadline midnight /by 2/12/2019 12:00AM`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following DEADLINE has been stored:  
  ╰┈➤ midnight (by: 2/12/2019 12:00AM)
  ```

➤ Time at Noon
- Input: `deadline noon /by 2/12/2019 12:00PM`
- Expected Output: The chatbot confirms the addition of the task:  
  ```
  ✍️ Understood! The following DEADLINE has been stored:  
  ╰┈➤ noon (by: 2/12/2019 12:00PM)
  ```

====================================================================================================

    6. Marking and Unmarking Tasks

➤ Marking a Task as Complete
- Purpose: Verify marking functionality.
- Input: `mark 1`
- Expected Output: The chatbot confirms the task is marked as complete:  
  ```
  ✍️ Understood, the following task has been set to Complete ✔️. Well Done!  
  ╰┈➤ 1. [T][X] Buy groceries
  ```

➤ Marking a Task as Complete (Non-Numeric)
- Purpose: Ensure error handling for invalid input.
- Input: `mark one`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Invalid Task Index! Please provide a valid number.
  ```

➤ List tasks to check marking
- Purpose: Verify the task list reflects the updated status.
- Input: `list`
- Expected Output: The chatbot displays the task list with the marked task:  
  ```
  ✍️ You currently have 【3】 pending tasks!  
  ╰┈➤ 1. [T][X] Buy groceries  
  ╰┈➤ 2. [E][ ] project meeting (from: 2/12/2019 to: 3/12/2019)  
  ╰┈➤ 3. [D][ ] report (by: 2/12/2019 6:00PM)
  ```

➤ Marking a Task as Incomplete
- Purpose: Verify unmarking functionality.
- Input: `unmark 1`
- Expected Output: The chatbot confirms the task is marked as incomplete:  
  ```
  ✍️ Understood, the following task has been set to Incomplete ❌. Keep it up!  
  ╰┈➤ 1. [T][ ] Buy groceries
  ```

➤ Marking a Task as Incomplete (Non-Numeric)
- Purpose: Validate incorrect unmarking input.
- Input: `unmark one`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Invalid Task Index! Please provide a valid number.
  ```

➤ Invalid Task Index (Mark/Unmark)
- Purpose: Ensure proper handling of out-of-range indexes.
- Input: `mark 10`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Task Index not found! Please try again.
  ```

➤ Missing Task Index (Mark/Unmark)
- Purpose: Validate missing index scenario.
- Input: `mark`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Missing Task Index! Please provide desired number.
  ```

====================================================================================================

    7. Deleting Tasks

➤ Deleting a Task
- Purpose: Test task deletion.
- Input: `delete 1`
- Expected Output: The chatbot confirms the task is deleted:  
  ```
  🗑️ Understood, the following task has been deleted:  
  ╰┈➤ 1. [T][ ] Buy groceries
  ```

➤ Invalid Task Index (Delete)
- Purpose: Ensure proper handling of out-of-range indexes.
- Input: `delete 10`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Task Index not found! Please try again.
  ```

➤ Missing Task Index (Delete)
- Purpose: Validate missing index scenario.
- Input: `delete`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Missing Task Index! Please provide desired number.
  ```

====================================================================================================

    8. Listing Tasks

➤ Listing All Tasks
- Purpose: Check if the final task list to save is displayed correctly.
- Input: `list`
- Expected Output: The chatbot displays the task list:  
  ```
  ✍️ You currently have 【2】 pending tasks!  
  ╰┈➤ 1. [E][ ] project meeting (from: 2/12/2019 to: 3/12/2019)  
  ╰┈➤ 2. [D][ ] report (by: 2/12/2019 6:00PM)
  ```

====================================================================================================

    9. Miscellaneous

➤ Check if garbage input throws exceptions
- Purpose: Verify error handling for invalid commands.
- Input: `randomcommand`
- Expected Output: The chatbot displays an error message:  
  ```
  ⚠️ Invalid Command! Please type 'commands' to see what I can
  ```

====================================================================================================